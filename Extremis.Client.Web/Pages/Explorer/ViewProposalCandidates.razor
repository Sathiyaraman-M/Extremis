@page "/Proposals/{Id:guid}/candidates"
@inject ProposalService ProposalService
@using Extremis.Proposals

<div class="page-body">
    <div class="container-xl">
        @if (_loaded)
        {
            <div class="card">
                <div class="card-header">
                    <h2>@_proposal.Title</h2>
                    <div class="card-actions">
                        <div class="btn-list align-items-center">
                            <a style="cursor: pointer" @onclick="@(() => NavigationManager.NavigateTo("/proposals", false, true))" class="mx-2">Go back to Your Proposals</a>
                            @switch (_proposal.Status)
                            {
                                case ProposalStatus.Open:
                                    <button class="btn">Close Proposal</button>
                                    break;
                                case ProposalStatus.Cancelled:
                                    <button class="btn btn-secondary" disabled>Cancelled</button>
                                    break;
                                case ProposalStatus.Closed:
                                    <button class="btn btn-secondary" disabled>Closed</button>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">Proposal Info</h4>
                            <div class="datagrid">
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Proposer</div>
                                    <div class="datagrid-content">@_proposal.ProposerName</div>
                                </div>
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Created On</div>
                                    <div class="datagrid-content">@_proposal.CreatedOn</div>
                                </div>
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Duration</div>
                                    <div class="datagrid-content">@_proposal.Duration</div>
                                </div>
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Status</div>
                                    <div class="datagrid-content">
                                        @switch (_proposal.Status)
                                        {
                                            case ProposalStatus.Open:
                                                <span class="status status-green">Open</span>
                                                break;
                                            case ProposalStatus.Closed:
                                                <span class="status status-yellow">Closed</span>
                                                break;
                                            case ProposalStatus.Cancelled:
                                                <span class="status status-gray">Cancelled</span>
                                                break;
                                            default:
                                                throw new ArgumentOutOfRangeException();
                                        }
                                    </div>
                                </div>
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Description</div>
                                    <div class="datagrid-content">@_proposal.Description</div>
                                </div>
                                <div class="datagrid-item">
                                    <div class="datagrid-title">Last Modified On</div>
                                    <div class="datagrid-content">@_proposal.LastModifiedOn</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <Pagination CurrentPage="_pageNumber" TotalPages="_totalPages" PageChanged="LoadReciprocators"/>
                        </div>
                        <div class="list-group list-group-flush list-group-hoverable">
                            @foreach (var reciprocator in _reciprocators)
                            {
                                <div class="list-group-item">
                                    <div class="row align-items-center">
                                        <div class="col">
                                            <h3>@reciprocator.ReciprocatorName</h3>
                                            <span class="text-muted">@reciprocator.Note</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="progress progress-sm">
                <div class="progress-bar progress-bar-indeterminate"></div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private int _pageNumber = 1;
    private int _pageSize = 10;
    private int _totalPages;
    private bool _loaded;
    private ProposalDto _proposal = new();
    private List<ReciprocatorDto> _reciprocators = new();

    protected override async Task OnInitializedAsync()
    {
        var proposalResult = await ProposalService.GetProposal(Id);
        if (proposalResult.Succeeded)
        {
            _proposal = proposalResult.Data;
            var userId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue(JwtClaimTypes.Subject);
            if (_proposal.ProposerId != userId)
            {
                NavigationManager.NavigateTo("Explore");
            }
            await LoadReciprocators(_pageNumber);
            _loaded = true;
        }
        else
        {
            Toast.Add("Error", "Specified Proposal not found!", Severity.Error);
            NavigationManager.NavigateTo("Explore");
        }
    }

    private async Task LoadReciprocators(int pageNumber)
    {
        var result = await ProposalService.GetAllCandidates(pageNumber, _pageSize, string.Empty, Id.ToString());
        if (result.Succeeded)
        {
            _reciprocators = result.Data;
            _totalPages = result.TotalPages;
        }
        else
        {
            foreach (var message in result.Messages)
            {
                Toast.Add("Error", message, Severity.Error);
            }
        }
    }

}