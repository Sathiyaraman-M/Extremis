@inject UserService UserService

@using System.Security.Claims
@using BlazorSlice.Dialog.Services
@using Extremis.Client.Shared.Dialogs
@using Extremis.Users
@using IdentityModel

<AuthorizeView>
    <Authorized>
        <div class="me-2">
            <a href="#" class="nav-link px-0" data-bs-toggle="dropdown" tabindex="-1" aria-label="Show notifications">
                <!-- Download SVG icon from http://tabler-icons.io/i/bell -->
                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 5a2 2 0 0 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"/><path d="M9 17v1a3 3 0 0 0 6 0v-1"/>
                </svg>
                <span class="badge bg-red"></span>
            </a>
        </div>
        <div class="nav-item dropdown">
            <a href="#" class="nav-link d-flex lh-1 text-reset p-0" data-bs-toggle="dropdown" aria-label="Open user menu">
                <span class="avatar avatar-sm" style="background-image: url('favicon.ico')"></span>
                <div class="d-none d-xl-block ps-2">
                    <div>@(context.User.FindFirstValue(JwtClaimTypes.PreferredUserName))</div>
                    <div class="d-flex ps-2 align-items-center">
                        @if (UserStatusDto != null)
                        {
                            switch (UserStatusDto.Status)
                            {
                                case UserStatus.Online:
                                    <span class="position-relative bottom-50 start-0 translate-middle badge bg-green"></span>
                                    break;
                                case UserStatus.Idle:
                                    <span class="position-relative bottom-50 start-0 translate-middle badge bg-yellow"></span>
                                    break;
                                case UserStatus.DoNotDisturb:
                                    <span class="position-relative bottom-50 start-0 translate-middle badge bg-red"></span>
                                    break;
                                case UserStatus.Offline:
                                    <span class="position-relative bottom-50 start-0 translate-middle badge bg-gray"></span>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                            @if (!string.IsNullOrWhiteSpace(UserStatusDto.CustomStatus))
                            {
                                <div class="mt-1 small text-muted">@UserStatusDto.CustomStatus</div>
                            }
                            else
                            {
                                <div class="mt-1 small text-muted">@UserStatusDto.Status.ToString()</div>
                            }
                        }
                    </div>
                </div>
            </a>
            <div class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                <a class="dropdown-item" @onclick="UpdateUserStatus">Change status</a>
                <a href="/personal/profile" class="dropdown-item">Profile</a>
                <div class="dropdown-divider"></div>
                <a href="/personal/settings" class="dropdown-item">Settings</a>
                <a class="dropdown-item" @onclick="@Logout">Logout</a>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-light" @onclick="@(() => NavigationManager.NavigateToLogin("authentication/login"))">Log In</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    
    private UserStatusDto UserStatusDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserStatus();
    }

    private async Task LoadUserStatus()
    {
        var statusResult = await UserService.GetUserStatus();
        if (statusResult.Succeeded)
        {
            UserStatusDto = statusResult.Data;
        }
    }

    private async Task UpdateUserStatus()
    {
        var dialogOptions = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Centered };
        var dialog = DialogService.Show<ChangeStatusDialog>("Update User Status", dialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await LoadUserStatus();
        }
    }
    
    private async Task Logout()
    {
        var dialogOptions = new DialogOptions()
        {
            Position = DialogPosition.Centered
        };
        if (await DialogService.ShowMessageBox("Confirm Logout", "Are you sure want to log out of Extremis?", "Yes", "No", options: dialogOptions) == true)
        {
            NavigationManager.NavigateToLogout("authentication/logout");
        }
    }
}