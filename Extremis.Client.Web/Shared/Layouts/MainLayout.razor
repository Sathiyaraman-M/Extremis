@using Microsoft.AspNetCore.SignalR.Client
@inherits LayoutComponentBase
<DialogProvider/>
<ToastProvider/>
<div class="page">
    <div class="sticky-top">
        <header class="navbar navbar-expand-md navbar-light sticky-top d-print-none" style="z-index: 1000">
            <div class="container">
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbar-menu" aria-controls="navbar-menu" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <h1 class="navbar-brand navbar-brand-autodark d-none-navbar-horizontal pe-0 pe-md-3">
                    <a href=".">
                        <img src="./image/logo.png" height="2.25rem" alt="Extremis" class="navbar-brand-image ">
                    </a>
                </h1>
                <div class="navbar-nav flex-row order-md-last">
                    <div class="d-none d-md-flex">
                        <a @onclick="@ToggleDarkMode" class="nav-link px-0" title="Toggle dark mode" data-bs-toggle="tooltip" data-bs-placement="bottom">
                            @if (!_isDarkMode)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-moon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    @(new MarkupString(TablerIcons.Moon))
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-sun" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    @(new MarkupString(TablerIcons.Sun))
                                </svg>
                            }
                        </a>
                        <div class="d-flex align-items-center">
                            <LoginDisplay/>
                        </div>
                    </div>
                </div>
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <NavMenu/>
                </div>
            </div>
        </header>
    </div>
    <div class="page-wrapper">
        @Body
    </div>
</div>

@code
{
    private bool _isDarkMode;
    
    private HubConnection _hubConnection;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;
    
    private string UserId { get;set; }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = await JsRuntime.InvokeAsync<bool>("setThemeMode", !_isDarkMode);
    }

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await JsRuntime.InvokeAsync<bool>("getThemeMode");
        UserId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue(JwtClaimTypes.Subject);
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/projectChatHub")).Build();
        await _hubConnection.StartAsync();
        _hubConnection.On<string, string, string, string>("ReceiveChatNotification", (message, receiverId, senderUserId, projectId) =>
        {
            if (UserId == receiverId)
            {
                Toast.Add("New Message", message, Severity.Info, config =>
                {
                    config.Action = "View";
                    config.Onclick = toast =>
                    {
                        NavigationManager.NavigateTo($"/project/{projectId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
    }
}